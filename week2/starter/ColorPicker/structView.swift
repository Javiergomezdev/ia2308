import SwiftUI

struct ColorPreviewView: View {
    @Binding var color: Color

    var body: some View {
        RoundedRectangle(cornerRadius: 0)
            .foregroundColor(color)
            .overlay(
              RoundedRectangle(cornerRadius: 0)
                .stroke(Color.brown, lineWidth: 10)  /*.overlay(
                                                      RoundedRectangle(cornerRadius: 0)
                                                          .stroke(Color(red: max(0, redColor / 255 - 0.2), green: max(0, greenColor / 255 - 0.2), blue: max(0, blueColor / 255 - 0.2)), lineWidth: 5))*/
                                                    // this is to obtain a darker color than the one generated by the sliders (google...)
              )
    }
}
struct ColorSliderView: View {
  @Binding var colorValue: Double
  var label: String
  var accentColor: Color
  var body: some View {
    VStack {
      Text(label)
      HStack {
        Slider(value: $colorValue, in: 0...255)
          .accentColor(accentColor)
        Text("\(Int(colorValue.rounded()))")
      }
    }
  }
}


struct VertiView: View {
  @Environment(\.colorScheme) var colorScheme
  @State private var alertIsVisible: Bool = false
  @State private var redColor: Double = 0.0
  @State private var greenColor: Double = 0.0
  @State private var blueColor: Double = 0.0
  @State private var foregroundColor = Color(red: 0, green: 0, blue: 0)
  
  var body: some View {
    VStack {
      Text("Color Picker")
        .font(.largeTitle)
        .padding()
      
      ColorPreviewView(color: $foregroundColor)
        .padding()
      
      ColorSliderView(colorValue: $redColor, label: "Rojo", accentColor: .red)
      ColorSliderView(colorValue: $greenColor, label: "Verde", accentColor: .green)
      ColorSliderView(colorValue: $blueColor, label: "Azul", accentColor: .blue)
      
      Button("Set Color") {
        foregroundColor = Color(red: redColor / Constants.General.maxValue,
                                green: greenColor / Constants.General.maxValue,
                                blue: blueColor / Constants.General.maxValue)
      }
      .padding()
      .background(Color.blue)
      .foregroundColor(.white)
      .cornerRadius(10)
      .overlay(
        RoundedRectangle(cornerRadius: 10)
          .stroke(Color.white, lineWidth: 2)
      )
    }
    .background(colorScheme == .dark ? Color.black : Color.white)
    .padding(10)
  }
}
struct HoriView: View {
  @Environment(\.colorScheme) var colorScheme
  @State private var alertIsVisible: Bool = false
  @State private var redColor: Double = 0.0
  @State private var greenColor: Double = 0.0
  @State private var blueColor: Double = 0.0
  @State private var foregroundColor = Color(red: 0, green: 0, blue: 0)
  
  var body: some View {
    HStack {
      VStack {
        Text("Color Picker")
          .font(.largeTitle)
          .padding()
        
        ColorPreviewView(color: $foregroundColor)
          .padding()
      }
      VStack {
        ColorSliderView(colorValue: $redColor, label: "Rojo", accentColor: .red)
        ColorSliderView(colorValue: $greenColor, label: "Verde", accentColor: .green)
        ColorSliderView(colorValue: $blueColor, label: "Azul", accentColor: .blue)
        
        Button("Set Color") {
          foregroundColor = Color(red: redColor / Constants.General.maxValue,
                                  green: greenColor / Constants.General.maxValue,
                                  blue: blueColor / Constants.General.maxValue)
        }
        .padding()
        .background(Color.blue)
        .foregroundColor(.white)
        .cornerRadius(10)
        .overlay(
          RoundedRectangle(cornerRadius: 10)
            .stroke(Color.white, lineWidth: 2)
        )
      }
    }
    .background(colorScheme == .dark ? Color.black : Color.white)
    .padding(10)
  }
}
